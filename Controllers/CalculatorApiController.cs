/*
 * Calculator API
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using CalculatorApi.Models;
using CalculatorApi.Attributes;
using Microsoft.AspNetCore.Authorization;
using Microsoft.AspNetCore.Mvc;
using Newtonsoft.Json;
using Swashbuckle.AspNetCore.Annotations;
using CalculatorApi.Services;

namespace CalculatorApi.Controllers
{
    /// <summary>
    /// 
    /// </summary>
    [ApiController]
    public class CalculatorApiController : ControllerBase
    {
        private readonly ICalculatorService _calculatorService;

        public CalculatorApiController(ICalculatorService calculatorService)
        {
            _calculatorService = calculatorService;
        }



        /// <summary>
        /// Add two numbers
        /// </summary>
        /// <param name="body"></param>
        /// <response code="200">Successful operation</response>
        /// <response code="0">Unexpected error</response>
        [Authorize]
        [HttpPost]
        [Route("/calculator/add")]
        [ValidateModelState]
        [SwaggerOperation("CalculatorAddPost")]
        [SwaggerResponse(statusCode: 200, type: typeof(CalculatorResponce), description: "Successful operation")]
        [SwaggerResponse(statusCode: 0, type: typeof(Error), description: "Unexpected error")]
        public virtual IActionResult CalculatorAddPost([FromBody] CalculatorRequest body)
        {
            var result = _calculatorService.CalculatorAdd(body);
            return new ObjectResult(result);
        }

        /// <summary>
        /// Divide two numbers
        /// </summary>
        /// <param name="body"></param>
        /// <response code="200">Successful operation</response>
        /// <response code="0">Unexpected error</response>
        [Authorize]
        [HttpPost]
        [Route("/calculator/divide")]
        [ValidateModelState]
        [SwaggerOperation("CalculatorDividePost")]
        [SwaggerResponse(statusCode: 200, type: typeof(CalculatorResponce), description: "Successful operation")]
        [SwaggerResponse(statusCode: 0, type: typeof(Error), description: "Unexpected error")]
        public virtual IActionResult CalculatorDividePost([FromBody] CalculatorRequest body)
        {
            if (body.Num2 == 0)
            {
                return BadRequest(new Error { Code = 500, Message = "It is impossible to divide by 0" });
            }

            var result = _calculatorService.CalculatorDivide(body);

            return new ObjectResult(result);
        }

        /// <summary>
        /// Multiply two numbers
        /// </summary>
        /// <param name="body"></param>
        /// <response code="200">Successful operation</response>
        /// <response code="0">Unexpected error</response>
        [Authorize]
        [HttpPost]
        [Route("/calculator/multiply")]
        [ValidateModelState]
        [SwaggerOperation("CalculatorMultiplyPost")]
        [SwaggerResponse(statusCode: 200, type: typeof(CalculatorResponce), description: "Successful operation")]
        [SwaggerResponse(statusCode: 0, type: typeof(Error), description: "Unexpected error")]
        public virtual IActionResult CalculatorMultiplyPost([FromBody] CalculatorRequest body)
        {
            var result = _calculatorService.CalculatorMultiply(body);
            return new ObjectResult(result);
        }

        /// <summary>
        /// Subtract two numbers
        /// </summary>
        /// <param name="body"></param>
        /// <response code="200">Successful operation</response>
        /// <response code="0">Unexpected error</response>
        [Authorize]
        [HttpPost]
        [Route("/calculator/subtract")]
        [ValidateModelState]
        [SwaggerOperation("CalculatorSubtractPost")]
        [SwaggerResponse(statusCode: 200, type: typeof(CalculatorResponce), description: "Successful operation")]
        [SwaggerResponse(statusCode: 0, type: typeof(Error), description: "Unexpected error")]
        public virtual IActionResult CalculatorSubtractPost([FromBody] CalculatorRequest body)
        {
            var result = _calculatorService.CalculatorSubtract(body);
            return new ObjectResult(result);
        }

    }
}
